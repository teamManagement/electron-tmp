name: Build Teamwork App
# on:
#   push:
#     tags:
#       - 'v*.*.*'

on:
  push:
    branches:
      - main

jobs:
  build-client-server:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: checkout client server
        # run: git clone https://github.com/teamManagement/team-client-server.git
        uses: actions/checkout@v3
        with:
          repository: teamManagement/team-client-server
          path: client-server

      - name: setup go env
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'
      
      - name: mod tidy client server dependence
        working-directory: ./client-server
        run: go mod tidy

      - name: build client server for macos
        if: matrix.os == 'macos-latest'
        working-directory: ./client-server
        run: CGO_ENABLED=1 go build -o teamwork-client-server-mac main.go
      
      - name: build client server for linux
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./client-server
        run: CGO_ENABLED=1 go build -o teamwork-client-server-linux main.go
      
      - name: build client server for win
        if: matrix.os == 'windows-latest'
        working-directory: ./client-server
        run: CGO_ENABLED=1 go build -o teamwork-client-server-win.exe main.go

      - name: Upload linux client server and mkcert bin
        uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with: 
          name: build-linux-result
          path: |
            teamwork-client-server-linux
            externalProgram/linux/*

      - name: Upload windows client server and mkcert bin
        uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with: 
          name: build-windows-result
          path: |
            teamwork-client-server-win.exe
            externalProgram/win/*



      # - name: Upload build result
      #   uses: actions/upload-artifact@v3
      #   with: 
      #     name: build-result
      #     path: |
      #       teamwork-client-server-*
  
  tidy-client-views:
    needs: build-client-server
    runs-on: ubuntu-latest
    steps:
      - name: checkout client view
        # run: git clone https://github.com/teamManagement/team-client-server.git
        uses: actions/checkout@v3
        with:
          repository: teamManagement/team-client
          path: client-view  

      - name: create process store dir
        working-directory: ./client-view
        run: |
          rm -rf process && mkdir -p process/{linux,win,mac}
        
      - name: Download client server linux bin
        uses: actions/download-artifact@v3
        with:
          name: build-linux-result
          path: process/linux/

      - name: Download client server windows bin
        uses: actions/download-artifact@v3
        with:
          name: build-windows-result
          path: process/win/

      - name: Display structure of downloaded files
        run: ls -R
      

      
# jobs:
#   build:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [macos-latest, ubuntu-latest]
#         # os: [windows-latest, macos-latest, ubuntu-latest]
        
#     steps:
#       - name: checkout git repository
#         uses: actions/checkout@v3
        
#       - name: Install Node,js
#         uses: actions/setup-node@v3.0.0
#         with:
#           node-version: "16"

#       - name: Install yarn
#         run: npm i -g yarn
      
#       - name: Install Dependencies
#         run: yarn

#       - name: Build for MacOs
#         if: matrix.os == 'macos-latest'
#         run: yarn build:mac

#       - name: Build for Linux
#         if: matrix.os == 'ubuntu-latest'
#         run: yarn build:linux

#       - name: Build for Windows
#         if: matrix.os == 'windows-latest'
#         run: yarn build:win
      
#       - name: Upload build result
#         uses: actions/upload-artifact@v3
#         with: 
#           name: build-result
#           path: dist
      
#   release:
#     name: Download back the built software and release them

#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Download back the built software
#         uses: actions/download-artifact@v3
#         with:
#           name: build-result
        
#       - name: Release software
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "*.deb,*.dmg"
#           token: ${{ secrets.GITHUB_TOKEN }}
